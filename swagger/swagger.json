{
  "swagger": "2.0",
  "info": {
    "description": "Here are some of the STORM APIs for testing and review...",
    "version": "1.0.0",
    "title": "STORM APIs",
    "contact": {
      "email": "api@storm-online.ir"
    }
  },
  "host": "api.storm-online.ir",
  "basePath": "/v1",
  "schemes": [
    "https"
  ],
  "paths": {
    "/people": {
      "get": {
        "tags": [
          "People"
        ],
        "description": "Get all people who exist in your STORM accounting panel",
        "operationId": "getAllPeople",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "People"
        ],
        "description": "<h3>One person creates in people list at definitions menu and adds this person to the details account</h3> <li><b>referenceId</b> is your person id in your site</li> <li><b>personType</b> should be <u>legal</u> or <u>real</u></li>",
        "operationId": "createPerson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create person object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/people/{personId}": {
      "get": {
        "tags": [
          "People"
        ],
        "description": "Get a person who exist in your STORM accounting panel",
        "operationId": "getAPerson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Id of person to return, this Id is for STORM accounting",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid Id supplied"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "People"
        ],
        "description": "Edit a person values",
        "operationId": "updatePerson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated person object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid person supplied"
          },
          "404": {
            "description": "person not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "People"
        ],
        "description": "Remove a person",
        "operationId": "deletePerson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid personId supplied"
          },
          "404": {
            "description": "person not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/people/batch": {
      "post": {
        "tags": [
          "People"
        ],
        "description": "Create people, you can create a group of people",
        "operationId": "createPeople",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create array of people objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Product"
        ],
        "description": "Get all products that exist in your STORM accounting panel",
        "operationId": "getAllProducts",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Product"
        ],
        "description": "<h3>One product creates in products list at definitions menu</h3> <li><b>productType</b> should be <u>good</u> or <u>service</u> </li> <li><b>referenceId</b> is your product id in your site </li>",
        "operationId": "createProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create product object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/products/{productId}": {
      "get": {
        "tags": [
          "Product"
        ],
        "description": "Get a product that exist in your STORM accounting panel",
        "operationId": "getAProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Id of product to return, this Id is for STORM accounting",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid Id supplied"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Product"
        ],
        "description": "Edit a product values",
        "operationId": "updateProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated product object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid product supplied"
          },
          "404": {
            "description": "product not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "description": "<h3>Remove a product</h3> <li> you can't remove a product when use in invoices",
        "operationId": "deleteProduct",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid productId supplied"
          },
          "404": {
            "description": "product not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/products/batch": {
      "post": {
        "tags": [
          "Product"
        ],
        "description": "Create products, you can create a group of products",
        "operationId": "createProducts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create array of products objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/sales": {
      "get": {
        "tags": [
          "Sale"
        ],
        "description": "Get all sale invoices that registered in your STORM accounting panel",
        "operationId": "getAllSales",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sale"
        ],
        "description": "<li><b>referenceId</b> in customer object is your customer id in your site</li> <li><b>costs and charges</b> you should registered in your STORM setting panel in invoices tab, first! and then use key</li> <li><b>invoiceLines</b> is list of invoice rows</li>  <li><b>stockId</b> in invoiceLines is for when you want to specify the stock (warehouse) in the invoice lines, so you need stockId from your STORM panel</li>",
        "operationId": "createSale",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create sale invoice object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/sales/{invoiceId}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "description": "Get a sale invoice that exist in your STORM accounting panel",
        "operationId": "getASaleInvoice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Id of sale invoice to return, this Id is for STORM accounting",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid Id supplied"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sale"
        ],
        "description": "Edit a sale invoice values",
        "operationId": "updateSaleInvoice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated sale invoice object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid sale invoice supplied"
          },
          "404": {
            "description": "sale invoice not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sale"
        ],
        "description": "Remove a sale invoice",
        "operationId": "deleteSaleInvoice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid invoiceId supplied"
          },
          "404": {
            "description": "sale invoice not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/treasury/receives/purposes/invoice": {
      "post": {
        "tags": [
          "Treasury"
        ],
        "summary": "Create receive for invoice",
        "description": "<h3>Use this api for registered sales invoice receives...</h3> <li> <b> refrenceId </b> in body is invoiceId that You want to register treasury <li> <b> treasury </b> is an object of your receive for invoice <li> <b> documentType </b> **required** is your receive type that should be cash or cheque or receipt <li> <b> documentDetail </b> is detail info about your receive",
        "operationId": "createTPInvoice",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Create receive object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Receive"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/treasury/receives/purposes/invoice/{invoiceId}": {
      "get": {
        "tags": [
          "Treasury"
        ],
        "description": "Get an invoice receives",
        "operationId": "getInvoiceReceives",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "Id of invoice to return, this Id is for STORM accounting",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Invalid Id supplied"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "x-access-token",
      "in": "header"
    }
  },
  "definitions": {
    "Person": {
      "type": "object",
      "properties": {
        "referenceId": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "province": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "mobile": {
          "type": "string"
        },
        "fax": {
          "type": "string"
        },
        "nationalCode": {
          "type": "string"
        },
        "economicCode": {
          "type": "string"
        },
        "registrationNumber": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "personType": {
          "type": "string"
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "productType": {
          "type": "string"
        },
        "reorderPoint": {
          "type": "number"
        },
        "salePrice": {
          "type": "number"
        },
        "categoryId": {
          "type": "string"
        },
        "scaleId": {
          "type": "string"
        },
        "referenceId": {
          "type": "string"
        },
        "barcode": {
          "type": "string"
        }
      }
    },
    "Invoice": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "number": {
          "type": "number"
        },
        "description": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "customer": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "referenceId": {
              "type": "string"
            },
            "title": {
              "type": "string"
            }
          }
        },
        "discount": {
          "type": "number"
        },
        "costs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "number"
              }
            }
          }
        },
        "charges": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "number"
              }
            }
          }
        },
        "invoiceLines": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "product": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "referenceId": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "productType": {
                    "type": "string"
                  }
                }
              },
              "description": {
                "type": "string"
              },
              "stockId": {
                "type": "string"
              },
              "discount": {
                "type": "number"
              },
              "quantity": {
                "type": "number"
              },
              "unitPrice": {
                "type": "number"
              },
              "vat": {
                "type": "number"
              }
            }
          }
        }
      }
    },
    "Receive": {
      "type": "object",
      "properties": {
        "referenceId": {
          "type": "string"
        },
        "treasury": {
          "type": "object",
          "properties": {
            "transferDate": {
              "type": "string"
            },
            "payerId": {
              "type": "string"
            },
            "receiverId": {
              "type": "string"
            },
            "amount": {
              "type": "number"
            },
            "description": {
              "type": "string"
            },
            "documentType": {
              "type": "string"
            },
            "documentDetail": {
              "type": "object",
              "properties": {
                "transferTo": {
                  "type": "string"
                },
                "transferFrom": {
                  "type": "string"
                },
                "number": {
                  "type": "string"
                },
                "issueDate": {
                  "type": "string"
                },
                "date": {
                  "type": "string"
                },
                "dueDate": {
                  "type": "string"
                },
                "bank": {
                  "type": "string"
                },
                "bankBranch": {
                  "type": "string"
                },
                "payTo": {
                  "type": "string"
                },
                "chequeAccountNumber": {
                  "type": "string"
                },
                "canTransferToAnother": {
                  "type": "string"
                },
                "identity": {
                  "type": "string"
                },
                "trackingNumber": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about STORM",
    "url": "http://storm-online.ir"
  }
}